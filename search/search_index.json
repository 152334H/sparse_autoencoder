{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A sparse autoencoder for mechanistic interpretability research.</p> <pre><code>pip install sparse_autoencoder\n</code></pre>"},{"location":"#demo","title":"Demo","text":"<p>Check out the demo notebook for a guide to using this library.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Demo</li> <li>Reference</li> <li>Contributing</li> <li>Citation</li> </ul>"},{"location":"citation/","title":"Citation","text":"<p>Please cite this library as:</p> <pre><code>@misc{cooney2023SparseAutoencoder,\n    title = {Sparse Autoencoder Library},\n    author = {Alan Cooney},\n    year = {2023},\n    howpublished = {\\url{https://github.com/ai-safety-foundation/sparse_autoencoder}},\n}\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#setup","title":"Setup","text":"<p>This project uses Poetry for dependency management, and PoeThePoet for scripts. After checking out the repo, we recommend setting poetry's config to create the <code>.venv</code> in the root directory (note this is a global setting) and then installing with the dev and demos dependencies.</p> <pre><code>poetry config virtualenvs.in-project true\npoetry install --with dev,demos\n</code></pre> <p>If you are using VSCode we highly recommend installing the recommended extensions as well (it will prompt you to do this when you checkout the repo).</p>"},{"location":"contributing/#checks","title":"Checks","text":"<p>For a full list of available commands (e.g. <code>test</code> or <code>typecheck</code>), run this in your terminal (assumes the venv is active already).</p> <pre><code>poe\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Please make sure to add thorough documentation for any features you add. You should do this directly in the docstring, and this will then automatically generate the API docs when merged into <code>main</code>. They will also be automatically checked with pytest (via doctest).</p> <p>If you want to view your documentation changes, run <code>poe docs-hot-reload</code>. This will give you hot-reloading docs (they change in real time as you edit docstrings).</p>"},{"location":"contributing/#docstring-style-guide","title":"Docstring Style Guide","text":"<p>We follow the Google Python Docstring Style for writing docstrings. Some important details below:</p>"},{"location":"contributing/#sections-and-order","title":"Sections and Order","text":"<p>You should follow this order:</p> <pre><code>\"\"\"Title In Title Case.\n\nA description of what the function/class does, including as much detail as is necessary to fully understand it.\n\nWarning:\n\nAny warnings to the user (e.g. common pitfalls).\n\nExamples:\n\nInclude any examples here. They will be checked with doctest.\n\n  &gt;&gt;&gt; print(1 + 2)\n  3\n\nArgs:\n    param_without_type_signature:\n        Each description should be indented once more.\n    param_2:\n        Another example parameter.\n\nReturns:\n    Returns description without type signature.\n\nRaises:\n    Information about the error it may raise (if any).\n\"\"\"\n</code></pre>"},{"location":"contributing/#supported-sphinx-properties","title":"Supported Sphinx Properties","text":""},{"location":"contributing/#references-to-other-functionsclasses","title":"References to Other Functions/Classes","text":"<p>You can reference other parts of the codebase using cross-referencing (noting that you can omit the full path if it is in the same file).</p> <pre><code>:mod:transformer_lens # Function or module\n\n:const:`transformer_lens.loading_from_pretrained.OFFICIAL_MODEL_NAMES`\n\n:class:`transformer_lens.HookedTransformer`\n\n:meth:`transformer_lens.HookedTransformer.from_pretrained`\n\n:attr:`transformer_lens.HookedTransformer.cfg`\n</code></pre>"},{"location":"contributing/#maths","title":"Maths","text":"<p>You can use LaTeX, but note that as you're placing this in python strings the backwards slash (<code>\\</code>) must be repeated (i.e. <code>\\\\</code>). You can write LaTeX inline, or in \"display mode\".</p> <pre><code>:math:`(a + b)^2 = a^2 + 2ab + b^2`\n</code></pre> <pre><code>.. math::\n   :nowrap:\n\n   \\\\begin{eqnarray}\n      y    &amp; = &amp; ax^2 + bx + c \\\\\n      f(x) &amp; = &amp; x^2 + 2xy + y^2\n   \\\\end{eqnarray}\n</code></pre>"},{"location":"contributing/#markup","title":"Markup","text":"<ul> <li>Italics - <code>*text*</code></li> <li>Bold - <code>**text**</code></li> <li>Code - <code>``code``</code></li> <li>List items - <code>*item</code></li> <li>Numbered items - <code>1. Item</code></li> <li>Quotes - indent one level</li> <li>External links = <code>`Link text &lt;https://domain.invalid/&gt;`</code></li> </ul>"},{"location":"demo/","title":"Demo","text":"<pre><code>%load_ext autoreload\n%autoreload 2\n\nimport os\nfrom pathlib import Path\n\nimport torch\nfrom transformer_lens import HookedTransformer\nfrom transformer_lens.utils import get_device\nfrom transformers import PreTrainedTokenizerBase\nimport wandb\n\nfrom sparse_autoencoder import SparseAutoencoder\nfrom sparse_autoencoder.activation_resampler import ActivationResampler\nfrom sparse_autoencoder.loss.learned_activations_l1 import LearnedActivationsL1Loss\nfrom sparse_autoencoder.loss.mse_reconstruction_loss import MSEReconstructionLoss\nfrom sparse_autoencoder.loss.reducer import LossReducer\nfrom sparse_autoencoder.optimizer.adam_with_reset import AdamWithReset\nfrom sparse_autoencoder.source_data.text_dataset import GenericTextDataset\nfrom sparse_autoencoder.train.pipeline import Pipeline\n\n\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\n\ndevice = get_device()\nprint(f\"Using device: {device}\")  # You will need a GPU\n</code></pre> <pre>\n<code>Using device: mps\n</code>\n</pre> <p>The way this library works is that you can define your own hyper-parameters and then setup the underlying components with them. This is extremely flexible, but to help you get started we've included some common ones below along with some sensible defaults. You can also easily sweep through multiple hyperparameters with <code>wandb.sweep</code>.</p> <pre><code>hyperparameters = {\n    # Expansion factor is the number of features in the sparse representation, relative to the\n    # number of features in the original MLP layer. The original paper experimented with 1x to 256x,\n    # and we have found that 4x is a good starting point.\n    \"expansion_factor\": 4,\n    # L1 coefficient is the coefficient of the L1 regularization term (used to encourage sparsity).\n    \"l1_coefficient\": 0.001,\n    # Adam parameters (set to the default ones here)\n    \"lr\": 0.001,\n    \"adam_beta_1\": 0.9,\n    \"adam_beta_2\": 0.999,\n    \"adam_epsilon\": 1e-8,\n    \"adam_weight_decay\": 0.0,\n    # Batch sizes\n    \"train_batch_size\": 8192,\n}\n</code></pre> <p>The source model is just a TransformerLens model (see here for a full list of supported models).</p> <p>In this example we're training a sparse autoencoder on the activations from the first MLP layer, so we'll also get some details about that hook point.</p> <pre><code># Source model setup with TransformerLens\nsrc_model_name = \"tiny-stories-1M\"\nsrc_model = HookedTransformer.from_pretrained(src_model_name, dtype=\"float32\")\n\n# Details about the activations we'll train the sparse autoencoder on\nsrc_model_activation_hook_point = \"blocks.0.mlp.hook_post\"\nsrc_model_activation_layer = 0\nsrc_d_mlp: int = src_model.cfg.d_mlp  # type: ignore (TransformerLens typing is currently broken)\n\nf\"Source: {src_model_name}, Hook: {src_model_activation_hook_point}, Features: {src_d_mlp}\"\n</code></pre> <pre>\n<code>Using pad_token, but it is not set yet.\n</code>\n</pre> <pre>\n<code>Loaded pretrained model tiny-stories-1M into HookedTransformer\n</code>\n</pre> <pre>\n<code>'Source: tiny-stories-1M, Hook: blocks.0.mlp.hook_post, Features: 256'</code>\n</pre> <p>We can then setup the sparse autoencoder. The default model (<code>SparseAutoencoder</code>) is setup as per the original Anthropic paper Towards Monosemanticity: Decomposing Language Models With Dictionary Learning .</p> <p>However it's just a standard PyTorch model, so you can create your own model instead if you want to use a different architecture. To do this you just need to extend the <code>AbstractAutoencoder</code>, and optionally the underlying <code>AbstractEncoder</code>, <code>AbstractDecoder</code> and <code>AbstractOuterBias</code>. See these classes (which are fully documented) for more details.</p> <pre><code>expansion_factor = hyperparameters[\"expansion_factor\"]\nautoencoder = SparseAutoencoder(\n    n_input_features=src_d_mlp,  # size of the activations we are autoencoding\n    n_learned_features=int(src_d_mlp * expansion_factor),  # size of SAE\n    geometric_median_dataset=torch.zeros(src_d_mlp),  # this is used to initialize the tied bias\n).to(device)\nautoencoder  # Print the model (it's pretty straightforward)\n</code></pre> <pre>\n<code>SparseAutoencoder(\n  (_pre_encoder_bias): TiedBias(position=pre_encoder)\n  (_encoder): LinearEncoder(\n    in_features=256, out_features=1024\n    (activation_function): ReLU()\n  )\n  (_decoder): UnitNormDecoder(in_features=1024, out_features=256)\n  (_post_decoder_bias): TiedBias(position=post_decoder)\n)</code>\n</pre> <p>We'll also want to setup an Optimizer and Loss function. In this case we'll also use the standard approach from the original Anthropic paper. However you can create your own loss functions and optimizers by extending <code>AbstractLoss</code> and <code>AbstractOptimizerWithReset</code> respectively.</p> <pre><code># We use a loss reducer, which simply adds up the losses from the underlying loss functions.\nloss = LossReducer(\n    LearnedActivationsL1Loss(\n        l1_coefficient=hyperparameters[\"l1_coefficient\"],\n    ),\n    MSEReconstructionLoss(),\n)\nloss\n</code></pre> <pre>\n<code>LossReducer(\n  (0): LearnedActivationsL1Loss(l1_coefficient=0.001)\n  (1): MSEReconstructionLoss()\n)</code>\n</pre> <pre><code>optimizer = AdamWithReset(\n    params=autoencoder.parameters(),\n    named_parameters=autoencoder.named_parameters(),\n    lr=hyperparameters[\"lr\"],\n    betas=(hyperparameters[\"adam_beta_1\"], hyperparameters[\"adam_beta_2\"]),\n    eps=hyperparameters[\"adam_epsilon\"],\n    weight_decay=hyperparameters[\"adam_weight_decay\"],\n)\noptimizer\n</code></pre> <pre>\n<code>AdamWithReset (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: None\n    lr: 0.001\n    maximize: False\n    weight_decay: 0.0\n)</code>\n</pre> <p>Finally we'll initialise an activation resampler.</p> <pre><code>activation_resampler = ActivationResampler()\n</code></pre> <p>This is just a dataset of tokenized prompts, to be used in generating activations (which are in turn used to train the SAE).</p> <pre><code>tokenizer: PreTrainedTokenizerBase = src_model.tokenizer  # type: ignore\nsource_data = GenericTextDataset(tokenizer=tokenizer, dataset_path=\"roneneldan/TinyStories\")\n</code></pre> <pre>\n<code>/Users/alan/Documents/Repos/sparse_autoencoder/.venv/lib/python3.11/site-packages/huggingface_hub/repocard.py:105: UserWarning: Repo card metadata block was not found. Setting CardData to empty.\n  warnings.warn(\"Repo card metadata block was not found. Setting CardData to empty.\")\n</code>\n</pre> <p>If you initialise wandb, the pipeline will automatically log all metrics to wandb. However, we should pass in a dictionary with all of our hyperaparameters so they're on  wandb. </p> <p>We strongly encourage users to make use of wandb in order to understand the training process.</p> <pre><code>Path(\".cache/\").mkdir(exist_ok=True)\nwandb.init(\n    project=\"sparse-autoencoder\",\n    dir=\".cache\",\n    config=hyperparameters,\n)\n</code></pre> <pre>\n<code>Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\nwandb: Currently logged in as: alan-cooney. Use `wandb login --relogin` to force relogin\n</code>\n</pre>  Tracking run with wandb version 0.16.0   Run data is saved locally in <code>.cache/wandb/run-20231122_191929-kc45kj7w</code>  Syncing run young-frog-69 to Weights &amp; Biases (docs)   View project at https://wandb.ai/alan-cooney/sparse-autoencoder   View run at https://wandb.ai/alan-cooney/sparse-autoencoder/runs/kc45kj7w Display W&amp;B run <pre><code>checkpoint_path = Path(\"../../.checkpoints\")\ncheckpoint_path.mkdir(exist_ok=True)\n</code></pre> <pre><code>pipeline = Pipeline(\n    cache_name=src_model_activation_hook_point,\n    layer=src_model_activation_layer,\n    source_model=src_model,\n    autoencoder=autoencoder,\n    source_dataset=source_data,\n    optimizer=optimizer,\n    loss=loss,\n    activation_resampler=activation_resampler,\n    source_data_batch_size=8,\n    checkpoint_directory=checkpoint_path,\n)\n\npipeline.run_pipeline(\n    train_batch_size=int(hyperparameters[\"train_batch_size\"]),\n    max_store_size=100_000,\n    # Sizes for demo purposes (you probably want to scale these by 10x)\n    max_activations=10_000_000,\n    resample_frequency=100_000,\n    checkpoint_frequency=100_000,\n)\n</code></pre> <pre>\n<code>Activations trained on:   0%|          | 0/10000000 [00:00&lt;?, ?it/s]</code>\n</pre> <pre>\n<code>/Users/alan/Documents/Repos/sparse_autoencoder/.venv/lib/python3.11/site-packages/torch/autograd/__init__.py:251: UserWarning: The operator 'aten::sgn.out' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/aten/src/ATen/mps/MPSFallback.mm:13.)\n  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n</code>\n</pre> <pre><code>wandb.finish()\n</code></pre> <pre>\n<code>VBox(children=(Label(value='0.001 MB of 0.001 MB uploaded\\r'), FloatProgress(value=1.0, max=1.0)))</code>\n</pre> <pre>\n<code>wandb: WARNING Source type is set to 'repo' but some required information is missing from the environment. A job will not be created from this run. See https://docs.wandb.ai/guides/launch/create-job\n</code>\n</pre> Run history:LearnedActivationsL1Loss\u2588\u2583\u2581\u2581\u2581\u2582\u2581\u2582\u2581\u2583\u2583\u2582\u2584\u2584\u2585\u2584\u2585\u2586\u2586\u2587\u2584\u2582\u2584\u2582\u2583\u2583\u2582\u2582\u2583\u2583\u2583\u2585\u2583\u2582\u2584\u2584\u2583\u2584\u2587\u2587LossReducer\u2588\u2583\u2582\u2581\u2581\u2581\u2581\u2582\u2581\u2583\u2583\u2582\u2583\u2583\u2585\u2584\u2584\u2585\u2585\u2586\u2584\u2582\u2583\u2582\u2583\u2582\u2582\u2582\u2582\u2582\u2583\u2584\u2584\u2582\u2585\u2584\u2583\u2583\u2586\u2586MSEReconstructionLoss\u2588\u2584\u2584\u2582\u2581\u2581\u2581\u2581\u2581\u2582\u2582\u2582\u2582\u2582\u2584\u2583\u2583\u2582\u2583\u2583\u2582\u2583\u2581\u2582\u2582\u2581\u2581\u2581\u2582\u2581\u2584\u2581\u2584\u2581\u2587\u2582\u2581\u2583\u2582\u2583Run summary:LearnedActivationsL1Loss0.00548LossReducer0.02247MSEReconstructionLoss0.01698   View run young-frog-69 at: https://wandb.ai/alan-cooney/sparse-autoencoder/runs/kc45kj7wSynced 5 W&amp;B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)   Find logs at: <code>.cache/wandb/run-20231122_191929-kc45kj7w/logs</code> <p> </p> <pre><code>\n</code></pre>"},{"location":"demo/#sparse-autoencoder-training-demo","title":"Sparse Autoencoder Training Demo","text":"<p>This demo trains a sparse autoencoder on activations from a Tiny Stories 1M model.</p> <p>To do this we setup a source model (the TinyStories model) that we want to generate activations from, along with a source dataset of prompts to help generate these activations.</p> <p>We also setup a sparse autoencoder model which we'll train on these generated activations, to learn a sparse representation of them in higher dimensional space.</p> <p>Finally we'll wrap this all together in a pipeline, which alternates between generating activations (storing them in ram), and training the SAE on said activations.</p>"},{"location":"demo/#setup","title":"Setup","text":""},{"location":"demo/#imports","title":"Imports","text":""},{"location":"demo/#hyperparameters","title":"Hyperparameters","text":""},{"location":"demo/#source-model","title":"Source Model","text":""},{"location":"demo/#sparse-autoencoder","title":"Sparse Autoencoder","text":""},{"location":"demo/#source-dataset","title":"Source dataset","text":""},{"location":"demo/#training","title":"Training","text":""},{"location":"demo/#training-advice","title":"Training Advice","text":"<p>-- Unfinished --</p> <ul> <li>Check recovery loss is low while sparsity is low as well (&lt;20 L1) usually.</li> <li>Can't be sure features are useful until you dig into them more. </li> </ul>"},{"location":"demo/#analysis","title":"Analysis","text":"<p>-- Unfinished --</p>"}]}